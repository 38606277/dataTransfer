{"version":3,"sources":["webpack:///./src/page/dbs/dbsrouter.jsx","webpack:///./src/util/HttpService.jsx","webpack:///./src/service/DbService.jsx","webpack:///./src/page/dbs/dbsList.jsx","webpack:///./src/page/dbs/dbInfo.jsx","webpack:///./src/page/dbs/dbView.jsx"],"names":["__webpack_require__","_reactRouterDom","DbsRouter","React","Component","_react2","default","createElement","Switch","Route","path","component","DbsList","DbInfo","DbView","Redirect","exact","from","to","_LogcalStorge","localStorge","LocalStorge","HttpService","window","getServerUrl","url","param","undefined","getStorage","location","href","Promise","resolve","reject","fullUrl","getBaseUrl","opts","method","headers","Access-Control-Allow-Origin","credentials","JSON","stringify","body","fetch","then","response","json","catch","error","_HttpService","DbService","post","name","dbinfo","_name","db","DB","props","_classCallCheck","this","_this","_possibleConstructorReturn","__proto__","Object","getPrototypeOf","call","state","list","loadDbList","_this2","getDbList","setState","errMsg","_this3","confirm","deleteDb","alert","_this4","map","item","index","key","dataSource","columns","title","dataIndex","render","text","record","Link","_divider2","type","onClick","id","_card2","_button2","style","float","marginRight","marginBottom","_table2","pagination","marginTop","FormItem","_form2","Item","Option","_select2","confirmDirty","match","params","handleSubmit","bind","handleConfirmBlur","getDb","form","setFieldsValue","errorTips","value","_props$form$setFields","drivers","urls","_defineProperty","e","target","trim","preventDefault","validateFieldsAndScroll","err","values","saveDb","testDb","retMsg","_this5","getFieldDecorator","formItemLayout","labelCol","xs","span","sm","wrapperCol","onSubmit","_row2","_col2","_extends","label","rules","required","message","_input2","whitespace","width","onChange","onSelectChange","offset","clickTest","htmlType","marginLeft","create","dbtype","driver","username","password"],"mappings":"wYACAA,EAAA,IACAC,EAAAD,EAAA,SAEAA,EAAA,UACAA,EAAA,UACAA,EAAA,6DAEME,grBAAkBC,UAAMC,+CAEtB,OACIC,EAAAC,QAAAC,cAACN,EAAAO,OAAD,KACKH,EAAAC,QAAAC,cAACN,EAAAQ,MAAD,CAAOC,KAAK,eAAeC,UAAWC,YACtCP,EAAAC,QAAAC,cAACN,EAAAQ,MAAD,CAAOC,KAAK,oBAAoBC,UAAWE,YAC3CR,EAAAC,QAAAC,cAACN,EAAAQ,MAAD,CAAOC,KAAK,oBAAoBC,UAAWG,YAC3CT,EAAAC,QAAAC,cAACN,EAAAc,SAAD,CAAUC,OAAA,EAAMC,KAAK,OAAOC,GAAG,qCAKjChB,+VCpBfF,EAAA,KACA,MAAAmB,EAAAnB,EAAA,KACA,IAAMoB,EAAc,uCAAIC,QACHC,gNAKb,OADQC,OAAOC,4CAKPC,EAAIC,GACZ,GAAIC,MAAWP,EAAYQ,WAAW,aAAoB,gCAALH,GAA4C,iCAALA,GAA0C,IAAIL,EAAYQ,WAAW,aAAqB,gCAALH,GAA4C,iCAALA,EAEpN,OADAF,OAAOM,SAASC,KAAK,SACb,IAAIC,QAAQ,SAACC,EAASC,MAE9B,IAAMC,EAAUZ,EAAYa,aAAeV,EACvCW,EAAO,CACPC,OAAQ,OACRC,QAAS,CACLC,8BAA+B,IAC/BC,YAAaC,KAAKC,UAAUtB,EAAYQ,WAAW,aAAe,KAEtEe,KAAMjB,GAGV,OAAOkB,MAAMV,EAASE,GAAMS,KAAK,SAACC,GAE1B,OAAOA,EAASC,SACjBC,MAAM,SAACC,GACN,OAAOA,EAAMF,4BA5BZzB,iWCHrB4B,EAAAlD,EAAA,6CACqBmD,8KAOb,OAAO7B,UAAY8B,KAJT,gCACE,kCAKVC,GAEF,OAAO/B,UAAY8B,KADX,kCACoBC,kCAEzBC,GACH,GAAiB,QAAdA,EAAOC,MAAc,CAEpB,OAAOjC,UAAY8B,KADX,6BACoBX,KAAKC,UAAUY,IAG3C,OAAOhC,UAAY8B,KADX,+BACoBX,KAAKC,UAAUY,qCAG1CD,GAEL,OAAO/B,UAAY8B,KADX,+BACoBC,kCAEzBC,GAEH,OAAOhC,UAAY8B,KADX,6BACoBX,KAAKC,UAAUY,uBA5B9BH,yZCArB,QAAAnD,EAAA,IACAC,EAAAD,EAAA,wDAGA,IAAMwD,EAAK,MAFXxD,EAAA,MAEeyD,SAET7C,cACF,SAAAA,EAAY8C,gGAAMC,CAAAC,KAAAhD,GAAA,IAAAiD,mKAAAC,CAAAF,MAAAhD,EAAAmD,WAAAC,OAAAC,eAAArD,IAAAsD,KAAAN,KACRF,IADQ,OAEdG,EAAKM,MAAQ,CACTC,KAAO,IAHGP,qUADA1D,UAAMC,0DAQpBwD,KAAKS,kDAEG,IAAAC,EAAAV,KAERJ,EAAGe,UADa,IACQ1B,KAAK,SAAAC,GACzBwB,EAAKE,SAAS,CAACJ,KAAKtB,KACrB,SAAA2B,GACCH,EAAKE,SAAS,CACVJ,KAAO,wCAKVf,GAAK,IAAAqB,EAAAd,KACPe,QAAQ,WACPnB,EAAGoB,SAASvB,GAAMR,KAAK,SAAAC,GACnB+B,MAAM,QACNH,EAAKL,cACN,SAAAI,GACCI,MAAM,2CAMV,IAAAC,EAAAlB,KACJA,KAAKO,MAAMC,KAAKW,IAAI,SAACC,EAAKC,GACtBD,EAAKE,IAAID,IAEb,IAAME,EAAavB,KAAKO,MAAMC,KAEtBgB,EAAU,CAAC,CACfC,MAAO,OACPC,UAAW,OACXJ,IAAK,OACLK,OAAQ,SAASC,EAAMC,EAAQR,GAC5B,OAAO5E,EAAAC,QAAAC,cAACN,EAAAyF,KAAD,CAAMxE,GAAA,eAAoBuE,EAAOpC,MAAUmC,KAErD,CACAH,MAAO,OACPC,UAAW,SACXJ,IAAK,UACL,CACAG,MAAO,KACPC,UAAW,KACXC,OAAQ,SAACC,EAAMC,GAAP,OACJpF,EAAAC,QAAAC,cAAA,YACEF,EAAAC,QAAAC,cAACN,EAAAyF,KAAD,CAAMxE,GAAA,eAAoBuE,EAAOpC,MAAjC,MAAmDhD,EAAAC,QAAAC,cAAAoF,EAAArF,QAAA,CAASsF,KAAK,aACnD,UAAbH,EAAOpC,MAA+B,QAAboC,EAAOpC,KAAchD,EAAAC,QAAAC,cAAA,KAAGsF,QAAS,kBAAIf,EAAKF,SAAL,GAAiBa,EAAOpC,OAASvB,KAAK,gBAAtD,MAA4E,OAKrI,OACIzB,EAAAC,QAAAC,cAAA,OAAKuF,GAAG,gBACRzF,EAAAC,QAAAC,cAAAwF,EAAAzF,QAAA,CAAM+E,MAAM,QACRhF,EAAAC,QAAAC,cAAAyF,EAAA1F,QAAA,CAAQwB,KAAK,oBAAoBmE,MAAO,CAAEC,MAAO,QAASC,YAAa,OAAOC,aAAa,QAAWR,KAAK,WAA3G,QACAvF,EAAAC,QAAAC,cAAA8F,EAAA/F,QAAA,CAAO6E,WAAYA,EAAYC,QAASA,EAAUkB,YAAY,EAAOL,MAAO,CAACM,UAAU,+BASxF3F,knBCjFf,QAAAZ,EAAA,QACAA,EAAA,iLAGA,IAAMoB,EAAc,MADpBpB,EAAA,MACwBqB,SAClBmF,EAAWC,EAAAnG,QAAKoG,KAChBC,EAASC,EAAAtG,QAAOqG,OAChBnD,EAAK,IAAIC,UAET5C,cACF,SAAAA,EAAY6C,gGAAMC,CAAAC,KAAA/C,GAAA,IAAAgD,mKAAAC,CAAAF,MAAA/C,EAAAkD,WAAAC,OAAAC,eAAApD,IAAAqD,KAAAN,KACRF,IADQ,OAEdG,EAAKM,MAAQ,CACT0C,cAAc,EACdtD,MAAMM,EAAKH,MAAMoD,MAAMC,OAAO1D,MAElCQ,EAAKmD,aAAenD,EAAKmD,aAAaC,KAAlBpD,GACpBA,EAAKqD,kBAAqBrD,EAAKqD,kBAAkBD,KAAvBpD,GAPZA,qUADD1D,UAAMC,0DAYJ,IAAAkE,EAAAV,KACb,MAAMA,KAAKO,MAAMZ,OAAS,IAAIK,KAAKO,MAAMZ,OAAU,QAAQK,KAAKO,MAAMZ,OACpEC,EAAG2D,MAAMvD,KAAKO,MAAMZ,OAAOV,KAAK,SAAAC,GAE5BwB,EAAKZ,MAAM0D,KAAKC,eAAevE,IAEhC,SAAA2B,GACCH,EAAKE,SAAS,IACdpD,EAAYkG,UAAU7C,4CAOnBpB,EAAKkE,GAAM,IAAAC,EACjBC,EAAQ,KACRC,EAAK,KACC,UAAPH,GACAE,EAAQ,2BACRC,EAAK,gCACQ,SAAPH,GACNE,EAAQ,2BACRC,EAAK,2BACO,OAAPH,GACLE,EAAQ,4BACRC,EAAK,yBACO,WAAPH,IACLE,EAAQ,GACRC,EAAK,WAIR9D,KAAKF,MAAM0D,KAAKC,gBAAhBM,EAAAH,EAAA,GAAiCnE,EAAMkE,GAAvCI,EAAAH,EAAA,SAAoDC,GAApDE,EAAAH,EAAA,MAAgEE,GAAhEF,0CAIUI,GACb,IAAIvE,EAAOuE,EAAEC,OAAOxE,KAChBkE,EAAQK,EAAEC,OAAON,MAAMO,OAEvBlE,KAAKF,MAAM0D,KAAKC,eAAhBM,EAAA,GAAiCtE,EAAMkE,yCAKnCK,GAAG,IAAAlD,EAAAd,KACbgE,EAAEG,iBACFnE,KAAKF,MAAM0D,KAAKY,wBAAwB,SAACC,EAAKC,GACvCD,IACDC,EAAO3E,MAAMmB,EAAKP,MAAMZ,MACxBC,EAAG2E,OAAOD,GAAQrF,KAAK,SAAAC,GACrB+B,MAAM,QACNtD,OAAOM,SAASC,KAAK,SACpB,SAAA2C,GACCC,EAAKF,SAAS,IACdpD,EAAYkG,UAAU7C,kDAMhBmD,GAChB,IAAML,EAAQK,EAAEC,OAAON,MACvB3D,KAAKY,SAAS,CAAEqC,aAAcjD,KAAKO,MAAM0C,gBAAkBU,wCAGlD,IAAAzC,EAAAlB,KACTA,KAAKF,MAAM0D,KAAKY,wBAAwB,SAACC,EAAKC,GACvCD,GAEHzE,EAAG4E,OAAO,CAACtD,EAAKoD,OAAO,WAAWrF,KAAK,SAAAC,GACjC+B,MAAM/B,EAASuF,SAChB,SAAA5D,GACAI,MAAM,6CAMR,IAAAyD,EAAA1E,KACC2E,EAAsB3E,KAAKF,MAAM0D,KAAjCmB,kBACFC,EAAiB,CACrBC,SAAU,CACRC,GAAI,CAAEC,KAAM,IACZC,GAAI,CAAED,KAAM,IAEdE,WAAY,CACVH,GAAI,CAAEC,KAAM,IACZC,GAAI,CAAED,KAAM,MAgBhB,OACItI,EAAAC,QAAAC,cAAA,OAAKuF,GAAG,gBACRzF,EAAAC,QAAAC,cAAAwF,EAAAzF,QAAA,CAAM+E,MAAyB,QAAlBzB,KAAKO,MAAMZ,MAAe,OAAO,QAC9ClD,EAAAC,QAAAC,cAAAkG,EAAAnG,QAAA,CAAMwI,SAAUlF,KAAKoD,cACrB3G,EAAAC,QAAAC,cAAAwI,EAAAzI,QAAA,KACKD,EAAAC,QAAAC,cAAAyI,EAAA1I,QAAA,CAAKqI,KAAM,IACNtI,EAAAC,QAAAC,cAACiG,EAADyC,EAAA,GAAcT,EAAd,CAA8BU,MAAM,SACjCX,EAAkB,OAAQ,CACzBY,MAAO,CAAC,CAACC,UAAU,EAAMC,QAAS,cADnCd,CAGClI,EAAAC,QAAAC,cAAA+I,EAAAhJ,QAAA,CAAOsF,KAAK,OAAOvC,KAAK,YAIhChD,EAAAC,QAAAC,cAAAyI,EAAA1I,QAAA,CAAKqI,KAAM,IACPtI,EAAAC,QAAAC,cAACiG,EAADyC,EAAA,GAAcT,EAAd,CAA8BU,MAAM,UACnCX,EAAkB,SAAU,CACrBY,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,YAAaE,YAAY,KADnEhB,CAGClI,EAAAC,QAAAC,cAAAqG,EAAAtG,QAAA,CAAS+C,KAAK,SAAW4C,MAAO,CAAEuD,MAAO,KAAOC,SAAU,SAAClC,GAAD,OAAUe,EAAKoB,eAAe,SAASnC,KAC7FlH,EAAAC,QAAAC,cAACoG,EAAD,CAAQY,MAAM,UAAd,UACAlH,EAAAC,QAAAC,cAACoG,EAAD,CAAQY,MAAM,SAAd,SACAlH,EAAAC,QAAAC,cAACoG,EAAD,CAAQY,MAAM,OAAd,OACAlH,EAAAC,QAAAC,cAACoG,EAAD,CAAQY,MAAM,WAAd,gBAMflH,EAAAC,QAAAC,cAAAwI,EAAAzI,QAAA,KACGD,EAAAC,QAAAC,cAAAyI,EAAA1I,QAAA,CAAKqI,KAAM,IACDtI,EAAAC,QAAAC,cAACiG,EAADyC,EAAA,GAAcT,EAAd,CAA8BU,MAAM,SACjCX,EAAkB,SAAU,CAC3BY,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,WAAYE,YAAY,KAD5DhB,CAGClI,EAAAC,QAAAC,cAAA+I,EAAAhJ,QAAA,CAAQsF,KAAK,OAAOvC,KAAK,cAMrChD,EAAAC,QAAAC,cAAAyI,EAAA1I,QAAA,CAAKqI,KAAM,IACPtI,EAAAC,QAAAC,cAACiG,EAADyC,EAAA,GAAcT,EAAd,CAA8BU,MAAM,OAC7BX,EAAkB,MAAO,CACxBY,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,WAAYE,YAAY,KAD5DhB,CAGClI,EAAAC,QAAAC,cAAA+I,EAAAhJ,QAAA,CAAQsF,KAAK,OAAOvC,KAAK,YAKzChD,EAAAC,QAAAC,cAAAwI,EAAAzI,QAAA,KACID,EAAAC,QAAAC,cAAAyI,EAAA1I,QAAA,CAAKqI,KAAM,IACNtI,EAAAC,QAAAC,cAACiG,EAADyC,EAAA,GAAcT,EAAd,CAA8BU,MAAM,QAC9BX,EAAkB,WAAY,CAC7BY,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,UAAWE,YAAY,KAD3DhB,CAGClI,EAAAC,QAAAC,cAAA+I,EAAAhJ,QAAA,CAAQsF,KAAK,OAAOvC,KAAK,gBAI3ChD,EAAAC,QAAAC,cAAAyI,EAAA1I,QAAA,CAAKqI,KAAM,IAECtI,EAAAC,QAAAC,cAACiG,EAADyC,EAAA,GAAcT,EAAd,CAA8BU,MAAM,OAC/BX,EAAkB,WAAY,CAC7BY,MAAO,CAAC,CAAEC,UAAU,EAAOC,QAAS,SAAUE,YAAY,KAD3DhB,CAGClI,EAAAC,QAAAC,cAAA+I,EAAAhJ,QAAA,CAAQsF,KAAK,OAAOvC,KAAK,iBAMzChD,EAAAC,QAAAC,cAACiG,EAtFoB,CACzBqC,WAAY,CACVH,GAAI,CACFC,KAAM,GACNgB,OAAQ,GAEVf,GAAI,CACFD,KAAM,GACNgB,OAAQ,KA+ERtJ,EAAAC,QAAAC,cAAAyF,EAAA1F,QAAA,CAAQsF,KAAK,UAAWC,QAAS,kBAAIyC,EAAKsB,cAA1C,MACEvJ,EAAAC,QAAAC,cAAAyF,EAAA1F,QAAA,CAAQsF,KAAK,UAAUiE,SAAS,SAAS5D,MAAO,CAAC6D,WAAW,SAA5D,MACAzJ,EAAAC,QAAAC,cAAAyF,EAAA1F,QAAA,CAAQwB,KAAK,QAAS8D,KAAK,UAAUK,MAAO,CAAC6D,WAAW,SAAxD,6BAQGrD,EAAAnG,QAAKyJ,QAALtD,CAAc5F,imBClN7B,QAAAb,EAAA,QACAA,EAAA,yDAGA,IAAMoB,EAAc,MADpBpB,EAAA,MACwBqB,SAClBmF,EAAWC,EAAAnG,QAAKoG,KAEhBlD,GADSoD,EAAAtG,QAAOqG,OACX,IAAIlD,WAET3C,cACF,SAAAA,EAAY4C,gGAAMC,CAAAC,KAAA9C,GAAA,IAAA+C,mKAAAC,CAAAF,MAAA9C,EAAAiD,WAAAC,OAAAC,eAAAnD,IAAAoD,KAAAN,KACRF,IADQ,OAEdG,EAAKM,MAAQ,CACTd,KAAKQ,EAAKH,MAAMoD,MAAMC,OAAO1D,MAHnBQ,qUADD1D,UAAMC,0DAUJ,IAAAkE,EAAAV,KAEfJ,EAAG2D,MAAMvD,KAAKO,MAAMd,MAAMR,KAAK,SAAAC,GACvBwB,EAAKE,SAAS1B,IACf,SAAA2B,GACCH,EAAKE,SAAS,IAEdpD,EAAYkG,UAAU7C,sCAUJb,KAAKF,MAAM0D,KAAjCmB,kBADD,IAEDC,EAAiB,CACrBC,SAAU,CACRC,GAAI,CAAEC,KAAM,IACZC,GAAI,CAAED,KAAM,IAEdE,WAAY,CACVH,GAAI,CAAEC,KAAM,IACZC,GAAI,CAAED,KAAM,MAgBhB,OACItI,EAAAC,QAAAC,cAAA,OAAKuF,GAAG,gBACRzF,EAAAC,QAAAC,cAAAwF,EAAAzF,QAAA,CAAM+E,MAAM,QACZhF,EAAAC,QAAAC,cAAAkG,EAAAnG,QAAA,CAAMwI,SAAUlF,KAAKoD,cACrB3G,EAAAC,QAAAC,cAAAwI,EAAAzI,QAAA,KACKD,EAAAC,QAAAC,cAAAyI,EAAA1I,QAAA,CAAKqI,KAAM,IACNtI,EAAAC,QAAAC,cAACiG,EAADyC,EAAA,GAAcT,EAAd,CAA8BU,MAAM,SAE/BtF,KAAKO,MAAMd,OAGpBhD,EAAAC,QAAAC,cAAAyI,EAAA1I,QAAA,CAAKqI,KAAM,IACPtI,EAAAC,QAAAC,cAACiG,EAADyC,EAAA,GAAcT,EAAd,CAA8BU,MAAM,SAE/BtF,KAAKO,MAAM6F,UAIxB3J,EAAAC,QAAAC,cAAAwI,EAAAzI,QAAA,KACGD,EAAAC,QAAAC,cAAAyI,EAAA1I,QAAA,CAAKqI,KAAM,IACNtI,EAAAC,QAAAC,cAACiG,EAADyC,EAAA,GAAcT,EAAd,CAA8BU,MAAM,SAE/BtF,KAAKO,MAAM8F,SAGpB5J,EAAAC,QAAAC,cAAAyI,EAAA1I,QAAA,CAAKqI,KAAM,IACPtI,EAAAC,QAAAC,cAACiG,EAADyC,EAAA,GAAcT,EAAd,CAA8BU,MAAM,OAE/BtF,KAAKO,MAAM1C,OAIxBpB,EAAAC,QAAAC,cAAAwI,EAAAzI,QAAA,KACGD,EAAAC,QAAAC,cAAAyI,EAAA1I,QAAA,CAAKqI,KAAM,IACNtI,EAAAC,QAAAC,cAACiG,EAADyC,EAAA,GAAcT,EAAd,CAA8BU,MAAM,QAE/BtF,KAAKO,MAAM+F,WAGpB7J,EAAAC,QAAAC,cAAAyI,EAAA1I,QAAA,CAAKqI,KAAM,IACPtI,EAAAC,QAAAC,cAACiG,EAADyC,EAAA,GAAcT,EAAd,CAA8BU,MAAM,OAE/BtF,KAAKO,MAAMgG,YAKxB9J,EAAAC,QAAAC,cAACiG,EA5DoB,CACzBqC,WAAY,CACVH,GAAI,CACFC,KAAM,GACNgB,OAAQ,GAEVf,GAAI,CACFD,KAAM,GACNgB,OAAQ,KAqDRtJ,EAAAC,QAAAC,cAAAyF,EAAA1F,QAAA,CAAQwB,KAAK,QAAS8D,KAAK,WAA3B,6BAQKa,EAAAnG,QAAKyJ,QAALtD,CAAc3F","file":"5.js","sourcesContent":["\r\nimport React            from 'react';\r\nimport { HashRouter as Router, Switch, Redirect, Route, Link } from 'react-router-dom'\r\n// 页面\r\nimport DbsList from './dbsList.jsx';\r\nimport DbInfo from './dbInfo.jsx';\r\nimport DbView from './dbView.jsx';\r\n\r\nclass DbsRouter extends React.Component{\r\n    render(){\r\n        return (\r\n            <Switch>\r\n                 <Route path=\"/dbs/dbsList\" component={DbsList} />\r\n                 <Route path=\"/dbs/dbInfo/:name\" component={DbInfo} />\r\n                 <Route path=\"/dbs/dbView/:name\" component={DbView} />\r\n                 <Redirect exact from=\"/dbs\" to=\"/dbs/dbsList\"/> \r\n            </Switch>\r\n        )\r\n    }\r\n}\r\nexport default DbsRouter;","import 'whatwg-fetch';\r\nimport  LocalStorge  from './LogcalStorge.jsx';\r\nconst localStorge = new LocalStorge();\r\nexport default class HttpService {\r\n    \r\n    static getBaseUrl(){\r\n\r\n        var url=window.getServerUrl();//\"http://localhost:8080/\";\r\n        return url;\r\n    }\r\n    \r\n    //\r\n    static post(url,param){\r\n        if((undefined==localStorge.getStorage('userInfo') && url!='/reportServer/user/encodePwd' && url!='/reportServer/user/Reactlogin') || (''==localStorge.getStorage('userInfo')  && url!='/reportServer/user/encodePwd' && url!='/reportServer/user/Reactlogin')){\r\n            window.location.href='#login';\r\n            return  new Promise((resolve, reject) => {});\r\n        }else{\r\n            const fullUrl = HttpService.getBaseUrl() + url;\r\n            let opts = {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Access-Control-Allow-Origin': '*',\r\n                    credentials: JSON.stringify(localStorge.getStorage('userInfo') || '')\r\n                },\r\n                body: param\r\n            };\r\n\r\n            return fetch(fullUrl, opts).then((response) => {\r\n                    //console.log(response.json())\r\n                    return response.json();\r\n                }).catch((error)=>{\r\n                    return error.json();\r\n                });\r\n        }\r\n    }\r\n\r\n    get(){\r\n\r\n    }\r\n\r\n          \r\n    }\r\n","import HttpService from '../util/HttpService.jsx';\r\nexport default class DbService {\r\n    // 获取函数列表\r\n    getDbList() {\r\n        let url = \"transfer/DBConnection/ListAll\";\r\n        let param = {\r\n        };\r\n  \r\n        return HttpService.post(url,param);\r\n    }\r\n    getDb(name){\r\n        let url=\"transfer/DBConnection/GetByName\";\r\n        return HttpService.post(url,name);\r\n    }\r\n    saveDb(dbinfo){\r\n        if(dbinfo._name=='null'){\r\n            let url=\"transfer/DBConnection/save\";\r\n            return HttpService.post(url,JSON.stringify(dbinfo));\r\n        }else{\r\n            let url=\"transfer/DBConnection/update\";\r\n            return HttpService.post(url,JSON.stringify(dbinfo));\r\n        }\r\n    }\r\n    deleteDb(name){\r\n        let url=\"transfer/DBConnection/Delete\";\r\n        return HttpService.post(url,name);\r\n    }\r\n    testDb(dbinfo){\r\n        let url=\"transfer/DBConnection/test\";\r\n        return HttpService.post(url,JSON.stringify(dbinfo));\r\n    }\r\n}\r\n","\r\nimport React                from 'react';\r\nimport { Link }             from 'react-router-dom';\r\nimport DB                   from '../../service/DbService.jsx';\r\nimport {Table,Divider,Button,Card, Tooltip}  from 'antd';\r\nconst db = new DB();\r\n\r\nclass DbsList extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            list : []\r\n        };\r\n    }\r\n    componentDidMount(){\r\n        this.loadDbList();\r\n    }\r\n    loadDbList(){\r\n        let listParam = {};\r\n        db.getDbList(listParam).then(response => {\r\n            this.setState({list:response});\r\n        }, errMsg => {\r\n            this.setState({\r\n                list : []\r\n            });\r\n        });\r\n    }\r\n    \r\n    deleteDb(name){\r\n        if(confirm('确认删除吗？')){\r\n            db.deleteDb(name).then(response => {\r\n                alert(\"删除成功\");\r\n                this.loadDbList();\r\n            }, errMsg => {\r\n                alert(\"删除失败\");\r\n            });\r\n        }\r\n    }\r\n    \r\n\r\n    render(){\r\n        this.state.list.map((item,index)=>{\r\n            item.key=index;\r\n        })\r\n        const dataSource = this.state.list;\r\n        let self = this;\r\n          const columns = [{\r\n            title: '连接名称',\r\n            dataIndex: 'name',\r\n            key: 'name',\r\n            render: function(text, record, index) {\r\n               return <Link to={ `/dbs/dbView/${record.name}` }>{text}</Link>;\r\n             } \r\n          },{\r\n            title: '连接类型',\r\n            dataIndex: 'dbtype',\r\n            key: 'dbtype'\r\n          },{\r\n            title: '操作',\r\n            dataIndex: '操作',\r\n            render: (text, record) => (\r\n                <span>\r\n                  <Link to={ `/dbs/dbInfo/${record.name}` }>编辑</Link><Divider type=\"vertical\" />\r\n                  {record.name!='system' && record.name!='form' ?<a onClick={()=>this.deleteDb(`${record.name}`)} href=\"javascript:;\">删除</a>:\"\"}\r\n                </span>\r\n              ),\r\n          }];\r\n       \r\n        return (\r\n            <div id=\"page-wrapper\">\r\n            <Card title=\"连接管理\">\r\n                <Button href=\"#/dbs/dbInfo/null\" style={{ float: \"right\", marginRight: \"30px\",marginBottom:\"10px\"  }} type=\"primary\">新建连接</Button>\r\n                <Table dataSource={dataSource} columns={columns}  pagination={false} style={{marginTop:'30px'}}/>\r\n                \r\n            </Card>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default DbsList;","import React        from 'react';\r\nimport DB         from '../../service/DbService.jsx'\r\nimport { Form, Input, Select,Button, Card,Row, Col } from 'antd';\r\nimport LocalStorge  from '../../util/LogcalStorge.jsx';\r\nconst localStorge = new LocalStorge();\r\nconst FormItem = Form.Item;\r\nconst Option = Select.Option;\r\nconst db = new DB();\r\n\r\nclass DbInfo extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            confirmDirty: false,\r\n            _name:this.props.match.params.name\r\n        };\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleConfirmBlur  = this.handleConfirmBlur.bind(this);\r\n    }\r\n    \r\n //初始化加载调用方法\r\n    componentDidMount(){\r\n       if(null!=this.state._name && ''!=this.state._name  && 'null'!=this.state._name){\r\n            db.getDb(this.state._name).then(response => {\r\n               // this.setState(response);\r\n                this.props.form.setFieldsValue(response);\r\n                \r\n            }, errMsg => {\r\n                this.setState({});\r\n                localStorge.errorTips(errMsg);\r\n            });\r\n        }\r\n        \r\n    }\r\n\r\n    //编辑字段对应值\r\n    onSelectChange(name,value){\r\n         let drivers=null;\r\n         let urls=null;\r\n         if(value=='Oracle'){\r\n            drivers='oracle.jdbc.OracleDriver';\r\n            urls='jdbc:oracle:thin:@ip:port:xe';\r\n         }else if(value=='Mysql'){\r\n            drivers='com.mysql.cj.jdbc.Driver';\r\n            urls='jdbc:mysql://ip:port/xe';\r\n        }else if(value=='DB2'){\r\n            drivers='com.ibm.db2.jcc.DB2Driver';\r\n            urls='jdbc:db2://ip:port/xe';\r\n        }else if(value=='mongoDB'){\r\n            drivers='';\r\n            urls='ip:port';\r\n        }\r\n        // this.setState({[name]:value,driver:drivers,url:urls});  \r\n\r\n         this.props.form.setFieldsValue({[name]:value,driver:drivers,url:urls});\r\n    \r\n  }\r\n     //编辑字段对应值\r\n     onValueChange(e){\r\n      let name = e.target.name,\r\n          value = e.target.value.trim();\r\n      //this.setState({[name]:value});  \r\n          this.props.form.setFieldsValue({[name]:value});\r\n    \r\n  }\r\n\r\n   //提交\r\nhandleSubmit (e) {\r\n    e.preventDefault();\r\n    this.props.form.validateFieldsAndScroll((err, values) => {\r\n      if (!err) {\r\n          values._name=this.state._name;\r\n          db.saveDb(values).then(response => {\r\n            alert(\"保存成功\");\r\n            window.location.href=\"#/dbs\";\r\n          }, errMsg => {\r\n              this.setState({});\r\n              localStorge.errorTips(errMsg);\r\n          });\r\n      }\r\n    });\r\n  }\r\n\r\n  handleConfirmBlur(e) {\r\n    const value = e.target.value;\r\n    this.setState({ confirmDirty: this.state.confirmDirty || !!value });\r\n  }\r\n\r\n  clickTest(){\r\n    this.props.form.validateFieldsAndScroll((err, values) => {\r\n      if (!err) {\r\n        \r\n        db.testDb([this.values,'update']).then(response => {\r\n              alert(response.retMsg);\r\n          }, errMsg => {\r\n             alert(\"连接失败\");\r\n        });\r\n      }\r\n    });\r\n   \r\n  }\r\n  render() {\r\n    const { getFieldDecorator } = this.props.form;\r\n    const formItemLayout = {\r\n      labelCol: {\r\n        xs: { span: 24 },\r\n        sm: { span: 8 },\r\n      },\r\n      wrapperCol: {\r\n        xs: { span: 24 },\r\n        sm: { span: 16 },\r\n      },\r\n    };\r\n    const tailFormItemLayout = {\r\n      wrapperCol: {\r\n        xs: {\r\n          span: 24,\r\n          offset: 0,\r\n        },\r\n        sm: {\r\n          span: 16,\r\n          offset: 8,\r\n        },\r\n      },\r\n    };\r\n  \r\n    return (\r\n        <div id=\"page-wrapper\">\r\n        <Card title={this.state._name=='null' ?'新建连接':'编辑连接'}>\r\n        <Form onSubmit={this.handleSubmit}>\r\n        <Row>\r\n             <Col span={12}>\r\n                  <FormItem {...formItemLayout} label=\"连接名称\">\r\n                    {getFieldDecorator('name', {\r\n                      rules: [{required: true, message: '请输入连接名称!'}],\r\n                    })(\r\n                      <Input type='text' name='name'  />\r\n                    )}\r\n                  </FormItem>\r\n              </Col>\r\n              <Col span={12}>\r\n                  <FormItem {...formItemLayout} label='数据库类型' >\r\n                  {getFieldDecorator('dbtype', {\r\n                          rules: [{ required: true, message: '请选择数据库类型!', whitespace: true }],\r\n                        })(\r\n                    <Select  name='dbtype'   style={{ width: 120 }} onChange={(value) =>this.onSelectChange('dbtype',value)}>\r\n                        <Option value='Oracle' >Oracle</Option>\r\n                        <Option value='Mysql' >Mysql</Option>\r\n                        <Option value='DB2' >DB2</Option>\r\n                        <Option value='mongoDB' >mongoDB</Option>\r\n                      </Select>\r\n                     )}\r\n                  </FormItem>\r\n              </Col>\r\n          </Row> \r\n         <Row>\r\n            <Col span={12}>\r\n                      <FormItem {...formItemLayout} label='驱动类型' >\r\n                        {getFieldDecorator('driver', {\r\n                          rules: [{ required: true, message: '请输入驱动类型!', whitespace: true }],\r\n                        })(\r\n                          <Input  type='text' name='driver'  />\r\n                        )}\r\n                      </FormItem>\r\n              </Col>\r\n              \r\n\r\n              <Col span={12}> \r\n                  <FormItem {...formItemLayout} label='地址'>\r\n                        {getFieldDecorator('url', {\r\n                          rules: [{ required: true, message: '请输入驱动类型!', whitespace: true }],\r\n                        })(\r\n                          <Input  type='text' name='url'  />\r\n                        )}\r\n                      </FormItem>\r\n              </Col>\r\n          </Row>\r\n          <Row>\r\n              <Col span={12}> \r\n                   <FormItem {...formItemLayout} label='用户名'>\r\n                        {getFieldDecorator('username', {\r\n                          rules: [{ required: true, message: '请输入用户名!', whitespace: true }],\r\n                        })(\r\n                          <Input  type='text' name='username'  />\r\n                        )}\r\n                      </FormItem>\r\n        </Col>\r\n        <Col span={12} > \r\n        \r\n                    <FormItem {...formItemLayout} label='密码'>\r\n                        {getFieldDecorator('password', {\r\n                          rules: [{ required: false, message: '请输入密码!', whitespace: true }],\r\n                        })(\r\n                          <Input  type='text' name='password'  />\r\n                        )}\r\n                      </FormItem>\r\n          </Col>\r\n          </Row>\r\n         \r\n          <FormItem {...tailFormItemLayout}>\r\n          <Button type=\"primary\"  onClick={()=>this.clickTest()}>测试</Button>\r\n            <Button type=\"primary\" htmlType=\"submit\" style={{marginLeft:'30px'}}>保存</Button>\r\n            <Button href=\"#/dbs\"  type=\"primary\" style={{marginLeft:'30px'}}>返回</Button>\r\n          </FormItem>\r\n      </Form>\r\n      </Card>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Form.create()(DbInfo);","import React        from 'react';\r\nimport DB         from '../../service/DbService.jsx'\r\nimport { Form, Select,Button, Card,Row, Col } from 'antd';\r\nimport LocalStorge  from '../../util/LogcalStorge.jsx';\r\nconst localStorge = new LocalStorge();\r\nconst FormItem = Form.Item;\r\nconst Option = Select.Option;\r\nconst db = new DB();\r\n\r\nclass DbView extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            name:this.props.match.params.name\r\n            \r\n        };\r\n    }\r\n    \r\n //初始化加载调用方法\r\n    componentDidMount(){\r\n     \r\n        db.getDb(this.state.name).then(response => {\r\n                this.setState(response);\r\n            }, errMsg => {\r\n                this.setState({\r\n                });\r\n                localStorge.errorTips(errMsg);\r\n            });\r\n        \r\n        \r\n    }\r\n\r\n    \r\n    \r\n\r\n  render() {\r\n    const { getFieldDecorator } = this.props.form;\r\n    const formItemLayout = {\r\n      labelCol: {\r\n        xs: { span: 24 },\r\n        sm: { span: 8 },\r\n      },\r\n      wrapperCol: {\r\n        xs: { span: 24 },\r\n        sm: { span: 16 },\r\n      },\r\n    };\r\n    const tailFormItemLayout = {\r\n      wrapperCol: {\r\n        xs: {\r\n          span: 24,\r\n          offset: 0,\r\n        },\r\n        sm: {\r\n          span: 16,\r\n          offset: 8,\r\n        },\r\n      },\r\n    };\r\n   \r\n    return (\r\n        <div id=\"page-wrapper\">\r\n        <Card title='查看连接'>\r\n        <Form onSubmit={this.handleSubmit}>\r\n        <Row>\r\n             <Col span={12}>\r\n                  <FormItem {...formItemLayout} label=\"连接名称\">\r\n                   \r\n                      {this.state.name}\r\n                  </FormItem>\r\n              </Col>\r\n              <Col span={12}>\r\n                  <FormItem {...formItemLayout} label='连接类型' >\r\n                   \r\n                      {this.state.dbtype}\r\n                  </FormItem>\r\n              </Col>\r\n          </Row> \r\n          <Row>\r\n             <Col span={12}>\r\n                  <FormItem {...formItemLayout} label=\"驱动类型\">\r\n                   \r\n                      {this.state.driver}\r\n                  </FormItem>\r\n              </Col>\r\n              <Col span={12}>\r\n                  <FormItem {...formItemLayout} label='地址' >\r\n                   \r\n                      {this.state.url}\r\n                  </FormItem>\r\n              </Col>\r\n          </Row>\r\n          <Row>\r\n             <Col span={12}>\r\n                  <FormItem {...formItemLayout} label=\"用户名\">\r\n                   \r\n                      {this.state.username}\r\n                  </FormItem>\r\n              </Col>\r\n              <Col span={12}>\r\n                  <FormItem {...formItemLayout} label='密码' >\r\n                   \r\n                      {this.state.password}\r\n                  </FormItem>\r\n              </Col>\r\n          </Row>\r\n         \r\n          <FormItem {...tailFormItemLayout}>\r\n          <Button href=\"#/dbs\"  type=\"primary\">返回</Button>\r\n          </FormItem>\r\n      </Form>\r\n      </Card>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Form.create()(DbView);"],"sourceRoot":""}